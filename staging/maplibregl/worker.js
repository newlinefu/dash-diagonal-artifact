define(["./shared"],(function(e){"use strict";class t{constructor(e){this.keyCache={},e&&this.replace(e)}replace(e){this._layerConfigs={},this._layers={},this.update(e,[])}update(t,o){for(const o of t){this._layerConfigs[o.id]=o;const t=this._layers[o.id]=e.createStyleLayer(o);t._featureFilter=e.createFilter(t.filter),this.keyCache[o.id]&&delete this.keyCache[o.id]}for(const e of o)delete this.keyCache[e],delete this._layerConfigs[e],delete this._layers[e];this.familiesBySource={};const i=e.groupByLayout(Object.values(this._layerConfigs),this.keyCache);for(const e of i){const t=e.map((e=>this._layers[e.id])),o=t[0];if("none"===o.visibility)continue;const i=o.source||"";let r=this.familiesBySource[i];r||(r=this.familiesBySource[i]={});const n=o.sourceLayer||"_geojsonTileLayer";let s=r[n];s||(s=r[n]=[]),s.push(t)}}}class o{constructor(t){const o={},i=[];for(const e in t){const r=t[e],n=o[e]={};for(const e in r){const t=r[+e];if(!t||0===t.bitmap.width||0===t.bitmap.height)continue;const o={x:0,y:0,w:t.bitmap.width+2,h:t.bitmap.height+2};i.push(o),n[e]={rect:o,metrics:t.metrics}}}const{w:r,h:n}=e.potpack(i),s=new e.AlphaImage({width:r||1,height:n||1});for(const i in t){const r=t[i];for(const t in r){const n=r[+t];if(!n||0===n.bitmap.width||0===n.bitmap.height)continue;const a=o[i][t].rect;e.AlphaImage.copy(n.bitmap,s,{x:0,y:0},{x:a.x+1,y:a.y+1},n.bitmap)}}this.image=s,this.positions=o}}e.register("GlyphAtlas",o);class i{constructor(t){this.tileID=new e.OverscaledTileID(t.tileID.overscaledZ,t.tileID.wrap,t.tileID.canonical.z,t.tileID.canonical.x,t.tileID.canonical.y),this.uid=t.uid,this.zoom=t.zoom,this.pixelRatio=t.pixelRatio,this.tileSize=t.tileSize,this.source=t.source,this.overscaling=this.tileID.overscaleFactor(),this.showCollisionBoxes=t.showCollisionBoxes,this.collectResourceTiming=!!t.collectResourceTiming,this.returnDependencies=!!t.returnDependencies,this.promoteId=t.promoteId}parse(t,i,n,s,a){this.status="parsing",this.data=t,this.collisionBoxArray=new e.CollisionBoxArray;const l=new e.DictionaryCoder(Object.keys(t.layers).sort()),u=new e.FeatureIndex(this.tileID,this.promoteId);u.bucketLayerIDs=[];const c={},h={featureIndex:u,iconDependencies:{},patternDependencies:{},glyphDependencies:{},availableImages:n},p=i.familiesBySource[this.source];for(const o in p){const i=t.layers[o];if(!i)continue;1===i.version&&e.warnOnce(`Vector tile source "${this.source}" layer "${o}" does not use vector tile spec v2 and therefore may have some rendering errors.`);const s=l.encode(o),a=[];for(let e=0;e<i.length;e++){const t=i.feature(e),r=u.getId(t,o);a.push({feature:t,id:r,index:e,sourceLayerIndex:s})}for(const t of p[o]){const o=t[0];o.source!==this.source&&e.warnOnce(`layer.source = ${o.source} does not equal this.source = ${this.source}`),o.minzoom&&this.zoom<Math.floor(o.minzoom)||o.maxzoom&&this.zoom>=o.maxzoom||"none"!==o.visibility&&(r(t,this.zoom,n),(c[o.id]=o.createBucket({index:u.bucketLayerIDs.length,layers:t,zoom:this.zoom,pixelRatio:this.pixelRatio,overscaling:this.overscaling,collisionBoxArray:this.collisionBoxArray,sourceLayerIndex:s,sourceID:this.source})).populate(a,h,this.tileID.canonical),u.bucketLayerIDs.push(t.map((e=>e.id))))}}let d,f,g,m;const y=e.mapObject(h.glyphDependencies,(e=>Object.keys(e).map(Number)));Object.keys(y).length?s.send("getGlyphs",{uid:this.uid,stacks:y,source:this.source,tileID:this.tileID,type:"glyphs"},((e,t)=>{d||(d=e,f=t,w.call(this))})):f={};const v=Object.keys(h.iconDependencies);v.length?s.send("getImages",{icons:v,source:this.source,tileID:this.tileID,type:"icons"},((e,t)=>{d||(d=e,g=t,w.call(this))})):g={};const x=Object.keys(h.patternDependencies);function w(){if(d)return a(d);if(f&&g&&m){const t=new o(f),i=new e.ImageAtlas(g,m);for(const o in c){const s=c[o];s instanceof e.SymbolBucket?(r(s.layers,this.zoom,n),e.performSymbolLayout({bucket:s,glyphMap:f,glyphPositions:t.positions,imageMap:g,imagePositions:i.iconPositions,showCollisionBoxes:this.showCollisionBoxes,canonical:this.tileID.canonical})):s.hasPattern&&(s instanceof e.LineBucket||s instanceof e.FillBucket||s instanceof e.FillExtrusionBucket)&&(r(s.layers,this.zoom,n),s.addFeatures(h,this.tileID.canonical,i.patternPositions))}this.status="done",a(null,{buckets:Object.values(c).filter((e=>!e.isEmpty())),featureIndex:u,collisionBoxArray:this.collisionBoxArray,glyphAtlasImage:t.image,imageAtlas:i,glyphMap:this.returnDependencies?f:null,iconMap:this.returnDependencies?g:null,glyphPositions:this.returnDependencies?t.positions:null})}}x.length?s.send("getImages",{icons:x,source:this.source,tileID:this.tileID,type:"patterns"},((e,t)=>{d||(d=e,m=t,w.call(this))})):m={},w.call(this)}}function r(t,o,i){const r=new e.EvaluationParameters(o);for(const e of t)e.recalculate(r,i)}function n(t,o){const i=e.getArrayBuffer(t.request,((t,i,r,n)=>{t?o(t):i&&o(null,{vectorTile:new e.vectorTile.VectorTile(new e.Protobuf(i)),rawData:i,cacheControl:r,expires:n})}));return()=>{i.cancel(),o()}}class s{constructor(e,t,o,i){this.actor=e,this.layerIndex=t,this.availableImages=o,this.loadVectorData=i||n,this.loading={},this.loaded={}}loadTile(t,o){const r=t.uid;this.loading||(this.loading={});const n=!!(t&&t.request&&t.request.collectResourceTiming)&&new e.RequestPerformance(t.request),s=this.loading[r]=new i(t);s.abort=this.loadVectorData(t,((t,i)=>{if(delete this.loading[r],t||!i)return s.status="done",this.loaded[r]=s,o(t);const a=i.rawData,l={};i.expires&&(l.expires=i.expires),i.cacheControl&&(l.cacheControl=i.cacheControl);const u={};if(n){const e=n.finish();e&&(u.resourceTiming=JSON.parse(JSON.stringify(e)))}s.vectorTile=i.vectorTile,s.parse(i.vectorTile,this.layerIndex,this.availableImages,this.actor,((t,i)=>{if(t||!i)return o(t);o(null,e.extend({rawTileData:a.slice(0)},i,l,u))})),this.loaded=this.loaded||{},this.loaded[r]=s}))}reloadTile(e,t){const o=this.loaded,i=e.uid,r=this;if(o&&o[i]){const n=o[i];n.showCollisionBoxes=e.showCollisionBoxes;const s=(e,o)=>{const i=n.reloadCallback;i&&(delete n.reloadCallback,n.parse(n.vectorTile,r.layerIndex,this.availableImages,r.actor,i)),t(e,o)};"parsing"===n.status?n.reloadCallback=s:"done"===n.status&&(n.vectorTile?n.parse(n.vectorTile,this.layerIndex,this.availableImages,this.actor,s):s())}}abortTile(e,t){const o=this.loading,i=e.uid;o&&o[i]&&o[i].abort&&(o[i].abort(),delete o[i]),t()}removeTile(e,t){const o=this.loaded,i=e.uid;o&&o[i]&&delete o[i],t()}}class a{constructor(){this.loaded={}}loadTile(t,o){const{uid:i,encoding:r,rawImageData:n}=t,s=e.isImageBitmap(n)?this.getImageData(n):n,a=new e.DEMData(i,s,r);this.loaded=this.loaded||{},this.loaded[i]=a,o(null,a)}getImageData(t){this.offscreenCanvas&&this.offscreenCanvasContext||(this.offscreenCanvas=new OffscreenCanvas(t.width,t.height),this.offscreenCanvasContext=this.offscreenCanvas.getContext("2d",{willReadFrequently:!0})),this.offscreenCanvas.width=t.width,this.offscreenCanvas.height=t.height,this.offscreenCanvasContext.drawImage(t,0,0,t.width,t.height);const o=this.offscreenCanvasContext.getImageData(-1,-1,t.width+2,t.height+2);return this.offscreenCanvasContext.clearRect(0,0,this.offscreenCanvas.width,this.offscreenCanvas.height),new e.RGBAImage({width:o.width,height:o.height},o.data)}removeTile(e){const t=this.loaded,o=e.uid;t&&t[o]&&delete t[o]}}function l(e,t){if(0!==e.length){u(e[0],t);for(var o=1;o<e.length;o++)u(e[o],!t)}}function u(e,t){for(var o=0,i=0,r=0,n=e.length,s=n-1;r<n;s=r++){var a=(e[r][0]-e[s][0])*(e[s][1]+e[r][1]),l=o+a;i+=Math.abs(o)>=Math.abs(a)?o-l+a:a-l+o,o=l}o+i>=0!=!!t&&e.reverse()}var c=e.getDefaultExportFromCjs((function e(t,o){var i,r=t&&t.type;if("FeatureCollection"===r)for(i=0;i<t.features.length;i++)e(t.features[i],o);else if("GeometryCollection"===r)for(i=0;i<t.geometries.length;i++)e(t.geometries[i],o);else if("Feature"===r)e(t.geometry,o);else if("Polygon"===r)l(t.coordinates,o);else if("MultiPolygon"===r)for(i=0;i<t.coordinates.length;i++)l(t.coordinates[i],o);return t}));const h=e.vectorTile.VectorTileFeature.prototype.toGeoJSON;var p={exports:{}},d=e.pointGeometry,f=e.vectorTile.VectorTileFeature,g=m;function m(e,t){this.options=t||{},this.features=e,this.length=e.length}function y(e,t){this.id="number"==typeof e.id?e.id:void 0,this.type=e.type,this.rawGeometry=1===e.type?[e.geometry]:e.geometry,this.properties=e.tags,this.extent=t||4096}m.prototype.feature=function(e){return new y(this.features[e],this.options.extent)},y.prototype.loadGeometry=function(){var e=this.rawGeometry;this.geometry=[];for(var t=0;t<e.length;t++){for(var o=e[t],i=[],r=0;r<o.length;r++)i.push(new d(o[r][0],o[r][1]));this.geometry.push(i)}return this.geometry},y.prototype.bbox=function(){this.geometry||this.loadGeometry();for(var e=this.geometry,t=1/0,o=-1/0,i=1/0,r=-1/0,n=0;n<e.length;n++)for(var s=e[n],a=0;a<s.length;a++){var l=s[a];t=Math.min(t,l.x),o=Math.max(o,l.x),i=Math.min(i,l.y),r=Math.max(r,l.y)}return[t,i,o,r]},y.prototype.toGeoJSON=f.prototype.toGeoJSON;var v=e.pbf,x=g;function w(e){var t=new v;return function(e,t){for(var o in e.layers)t.writeMessage(3,S,e.layers[o])}(e,t),t.finish()}function S(e,t){var o;t.writeVarintField(15,e.version||1),t.writeStringField(1,e.name||""),t.writeVarintField(5,e.extent||4096);var i={keys:[],values:[],keycache:{},valuecache:{}};for(o=0;o<e.length;o++)i.feature=e.feature(o),t.writeMessage(2,I,i);var r=i.keys;for(o=0;o<r.length;o++)t.writeStringField(3,r[o]);var n=i.values;for(o=0;o<n.length;o++)t.writeMessage(4,T,n[o])}function I(e,t){var o=e.feature;void 0!==o.id&&t.writeVarintField(1,o.id),t.writeMessage(2,b,e),t.writeVarintField(3,o.type),t.writeMessage(4,k,o)}function b(e,t){var o=e.feature,i=e.keys,r=e.values,n=e.keycache,s=e.valuecache;for(var a in o.properties){var l=o.properties[a],u=n[a];if(null!==l){void 0===u&&(i.push(a),n[a]=u=i.length-1),t.writeVarint(u);var c=typeof l;"string"!==c&&"boolean"!==c&&"number"!==c&&(l=JSON.stringify(l));var h=c+":"+l,p=s[h];void 0===p&&(r.push(l),s[h]=p=r.length-1),t.writeVarint(p)}}}function M(e,t){return(t<<3)+(7&e)}function P(e){return e<<1^e>>31}function k(e,t){for(var o=e.loadGeometry(),i=e.type,r=0,n=0,s=o.length,a=0;a<s;a++){var l=o[a],u=1;1===i&&(u=l.length),t.writeVarint(M(1,u));for(var c=3===i?l.length-1:l.length,h=0;h<c;h++){1===h&&1!==i&&t.writeVarint(M(2,c-1));var p=l[h].x-r,d=l[h].y-n;t.writeVarint(P(p)),t.writeVarint(P(d)),r+=p,n+=d}3===i&&t.writeVarint(M(7,1))}}function T(e,t){var o=typeof e;"string"===o?t.writeStringField(1,e):"boolean"===o?t.writeBooleanField(7,e):"number"===o&&(e%1!=0?t.writeDoubleField(3,e):e<0?t.writeSVarintField(6,e):t.writeVarintField(5,e))}p.exports=w,p.exports.fromVectorTileJs=w,p.exports.fromGeojsonVt=function(e,t){t=t||{};var o={};for(var i in e)o[i]=new x(e[i].features,t),o[i].name=i,o[i].version=t.version,o[i].extent=t.extent;return w({layers:o})},p.exports.GeoJSONWrapper=x;var C=e.getDefaultExportFromCjs(p.exports);const _={minZoom:0,maxZoom:16,minPoints:2,radius:40,extent:512,nodeSize:64,log:!1,generateId:!1,reduce:null,map:e=>e},D=Math.fround||(O=new Float32Array(1),e=>(O[0]=+e,O[0]));var O;class L{constructor(e){this.options=G(Object.create(_),e),this.trees=new Array(this.options.maxZoom+1)}load(t){const{log:o,minZoom:i,maxZoom:r,nodeSize:n}=this.options;o&&console.time("total time");const s=`prepare ${t.length} points`;o&&console.time(s),this.points=t;let a=[];for(let e=0;e<t.length;e++)t[e].geometry&&a.push(F(t[e],e));this.trees[r+1]=new e.KDBush(a,j,J,n,Float32Array),o&&console.timeEnd(s);for(let t=r;t>=i;t--){const i=+Date.now();a=this._cluster(a,t),this.trees[t]=new e.KDBush(a,j,J,n,Float32Array),o&&console.log("z%d: %d clusters in %dms",t,a.length,+Date.now()-i)}return o&&console.timeEnd("total time"),this}getClusters(e,t){let o=((e[0]+180)%360+360)%360-180;const i=Math.max(-90,Math.min(90,e[1]));let r=180===e[2]?180:((e[2]+180)%360+360)%360-180;const n=Math.max(-90,Math.min(90,e[3]));if(e[2]-e[0]>=360)o=-180,r=180;else if(o>r){const e=this.getClusters([o,i,180,n],t),s=this.getClusters([-180,i,r,n],t);return e.concat(s)}const s=this.trees[this._limitZoom(t)],a=s.range(N(o),A(n),N(r),A(i)),l=[];for(const e of a){const t=s.points[e];l.push(t.numPoints?E(t):this.points[t.index])}return l}getChildren(e){const t=this._getOriginId(e),o=this._getOriginZoom(e),i="No cluster with the specified id.",r=this.trees[o];if(!r)throw new Error(i);const n=r.points[t];if(!n)throw new Error(i);const s=this.options.radius/(this.options.extent*Math.pow(2,o-1)),a=r.within(n.x,n.y,s),l=[];for(const t of a){const o=r.points[t];o.parentId===e&&l.push(o.numPoints?E(o):this.points[o.index])}if(0===l.length)throw new Error(i);return l}getLeaves(e,t,o){const i=[];return this._appendLeaves(i,e,t=t||10,o=o||0,0),i}getTile(e,t,o){const i=this.trees[this._limitZoom(e)],r=Math.pow(2,e),{extent:n,radius:s}=this.options,a=s/n,l=(o-a)/r,u=(o+1+a)/r,c={features:[]};return this._addTileFeatures(i.range((t-a)/r,l,(t+1+a)/r,u),i.points,t,o,r,c),0===t&&this._addTileFeatures(i.range(1-a/r,l,1,u),i.points,r,o,r,c),t===r-1&&this._addTileFeatures(i.range(0,l,a/r,u),i.points,-1,o,r,c),c.features.length?c:null}getClusterExpansionZoom(e){let t=this._getOriginZoom(e)-1;for(;t<=this.options.maxZoom;){const o=this.getChildren(e);if(t++,1!==o.length)break;e=o[0].properties.cluster_id}return t}_appendLeaves(e,t,o,i,r){const n=this.getChildren(t);for(const t of n){const n=t.properties;if(n&&n.cluster?r+n.point_count<=i?r+=n.point_count:r=this._appendLeaves(e,n.cluster_id,o,i,r):r<i?r++:e.push(t),e.length===o)break}return r}_addTileFeatures(e,t,o,i,r,n){for(const s of e){const e=t[s],a=e.numPoints;let l,u,c;if(a)l=B(e),u=e.x,c=e.y;else{const t=this.points[e.index];l=t.properties,u=N(t.geometry.coordinates[0]),c=A(t.geometry.coordinates[1])}const h={type:1,geometry:[[Math.round(this.options.extent*(u*r-o)),Math.round(this.options.extent*(c*r-i))]],tags:l};let p;a?p=e.id:this.options.generateId?p=e.index:this.points[e.index].id&&(p=this.points[e.index].id),void 0!==p&&(h.id=p),n.features.push(h)}}_limitZoom(e){return Math.max(this.options.minZoom,Math.min(Math.floor(+e),this.options.maxZoom+1))}_cluster(e,t){const o=[],{radius:i,extent:r,reduce:n,minPoints:s}=this.options,a=i/(r*Math.pow(2,t));for(let i=0;i<e.length;i++){const r=e[i];if(r.zoom<=t)continue;r.zoom=t;const l=this.trees[t+1],u=l.within(r.x,r.y,a),c=r.numPoints||1;let h=c;for(const e of u){const o=l.points[e];o.zoom>t&&(h+=o.numPoints||1)}if(h>c&&h>=s){let e=r.x*c,s=r.y*c,a=n&&c>1?this._map(r,!0):null;const p=(i<<5)+(t+1)+this.points.length;for(const o of u){const i=l.points[o];if(i.zoom<=t)continue;i.zoom=t;const u=i.numPoints||1;e+=i.x*u,s+=i.y*u,i.parentId=p,n&&(a||(a=this._map(r,!0)),n(a,this._map(i)))}r.parentId=p,o.push(z(e/h,s/h,p,h,a))}else if(o.push(r),h>1)for(const e of u){const i=l.points[e];i.zoom<=t||(i.zoom=t,o.push(i))}}return o}_getOriginId(e){return e-this.points.length>>5}_getOriginZoom(e){return(e-this.points.length)%32}_map(e,t){if(e.numPoints)return t?G({},e.properties):e.properties;const o=this.points[e.index].properties,i=this.options.map(o);return t&&i===o?G({},i):i}}function z(e,t,o,i,r){return{x:D(e),y:D(t),zoom:1/0,id:o,parentId:-1,numPoints:i,properties:r}}function F(e,t){const[o,i]=e.geometry.coordinates;return{x:D(N(o)),y:D(A(i)),zoom:1/0,index:t,parentId:-1}}function E(e){return{type:"Feature",id:e.id,properties:B(e),geometry:{type:"Point",coordinates:[(t=e.x,360*(t-.5)),Z(e.y)]}};var t}function B(e){const t=e.numPoints,o=t>=1e4?`${Math.round(t/1e3)}k`:t>=1e3?Math.round(t/100)/10+"k":t;return G(G({},e.properties),{cluster:!0,cluster_id:e.id,point_count:t,point_count_abbreviated:o})}function N(e){return e/360+.5}function A(e){const t=Math.sin(e*Math.PI/180),o=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return o<0?0:o>1?1:o}function Z(e){const t=(180-360*e)*Math.PI/180;return 360*Math.atan(Math.exp(t))/Math.PI-90}function G(e,t){for(const o in t)e[o]=t[o];return e}function j(e){return e.x}function J(e){return e.y}function Y(e,t,o,i){for(var r,n=i,s=o-t>>1,a=o-t,l=e[t],u=e[t+1],c=e[o],h=e[o+1],p=t+3;p<o;p+=3){var d=R(e[p],e[p+1],l,u,c,h);if(d>n)r=p,n=d;else if(d===n){var f=Math.abs(p-s);f<a&&(r=p,a=f)}}n>i&&(r-t>3&&Y(e,t,r,i),e[r+2]=n,o-r>3&&Y(e,r,o,i))}function R(e,t,o,i,r,n){var s=r-o,a=n-i;if(0!==s||0!==a){var l=((e-o)*s+(t-i)*a)/(s*s+a*a);l>1?(o=r,i=n):l>0&&(o+=s*l,i+=a*l)}return(s=e-o)*s+(a=t-i)*a}function V(e,t,o,i){var r={id:void 0===e?null:e,type:t,geometry:o,tags:i,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0};return function(e){var t=e.geometry,o=e.type;if("Point"===o||"MultiPoint"===o||"LineString"===o)X(e,t);else if("Polygon"===o||"MultiLineString"===o)for(var i=0;i<t.length;i++)X(e,t[i]);else if("MultiPolygon"===o)for(i=0;i<t.length;i++)for(var r=0;r<t[i].length;r++)X(e,t[i][r])}(r),r}function X(e,t){for(var o=0;o<t.length;o+=3)e.minX=Math.min(e.minX,t[o]),e.minY=Math.min(e.minY,t[o+1]),e.maxX=Math.max(e.maxX,t[o]),e.maxY=Math.max(e.maxY,t[o+1])}function W(e,t,o,i){if(t.geometry){var r=t.geometry.coordinates,n=t.geometry.type,s=Math.pow(o.tolerance/((1<<o.maxZoom)*o.extent),2),a=[],l=t.id;if(o.promoteId?l=t.properties[o.promoteId]:o.generateId&&(l=i||0),"Point"===n)q(r,a);else if("MultiPoint"===n)for(var u=0;u<r.length;u++)q(r[u],a);else if("LineString"===n)$(r,a,s,!1);else if("MultiLineString"===n){if(o.lineMetrics){for(u=0;u<r.length;u++)$(r[u],a=[],s,!1),e.push(V(l,"LineString",a,t.properties));return}U(r,a,s,!1)}else if("Polygon"===n)U(r,a,s,!0);else{if("MultiPolygon"!==n){if("GeometryCollection"===n){for(u=0;u<t.geometry.geometries.length;u++)W(e,{id:l,geometry:t.geometry.geometries[u],properties:t.properties},o,i);return}throw new Error("Input data is not a valid GeoJSON object.")}for(u=0;u<r.length;u++){var c=[];U(r[u],c,s,!0),a.push(c)}}e.push(V(l,n,a,t.properties))}}function q(e,t){t.push(K(e[0])),t.push(H(e[1])),t.push(0)}function $(e,t,o,i){for(var r,n,s=0,a=0;a<e.length;a++){var l=K(e[a][0]),u=H(e[a][1]);t.push(l),t.push(u),t.push(0),a>0&&(s+=i?(r*u-l*n)/2:Math.sqrt(Math.pow(l-r,2)+Math.pow(u-n,2))),r=l,n=u}var c=t.length-3;t[2]=1,Y(t,0,c,o),t[c+2]=1,t.size=Math.abs(s),t.start=0,t.end=t.size}function U(e,t,o,i){for(var r=0;r<e.length;r++){var n=[];$(e[r],n,o,i),t.push(n)}}function K(e){return e/360+.5}function H(e){var t=Math.sin(e*Math.PI/180),o=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return o<0?0:o>1?1:o}function Q(e,t,o,i,r,n,s,a){if(i/=t,n>=(o/=t)&&s<i)return e;if(s<o||n>=i)return null;for(var l=[],u=0;u<e.length;u++){var c=e[u],h=c.geometry,p=c.type,d=0===r?c.minX:c.minY,f=0===r?c.maxX:c.maxY;if(d>=o&&f<i)l.push(c);else if(!(f<o||d>=i)){var g=[];if("Point"===p||"MultiPoint"===p)ee(h,g,o,i,r);else if("LineString"===p)te(h,g,o,i,r,!1,a.lineMetrics);else if("MultiLineString"===p)ie(h,g,o,i,r,!1);else if("Polygon"===p)ie(h,g,o,i,r,!0);else if("MultiPolygon"===p)for(var m=0;m<h.length;m++){var y=[];ie(h[m],y,o,i,r,!0),y.length&&g.push(y)}if(g.length){if(a.lineMetrics&&"LineString"===p){for(m=0;m<g.length;m++)l.push(V(c.id,p,g[m],c.tags));continue}"LineString"!==p&&"MultiLineString"!==p||(1===g.length?(p="LineString",g=g[0]):p="MultiLineString"),"Point"!==p&&"MultiPoint"!==p||(p=3===g.length?"Point":"MultiPoint"),l.push(V(c.id,p,g,c.tags))}}}return l.length?l:null}function ee(e,t,o,i,r){for(var n=0;n<e.length;n+=3){var s=e[n+r];s>=o&&s<=i&&(t.push(e[n]),t.push(e[n+1]),t.push(e[n+2]))}}function te(e,t,o,i,r,n,s){for(var a,l,u=oe(e),c=0===r?ne:se,h=e.start,p=0;p<e.length-3;p+=3){var d=e[p],f=e[p+1],g=e[p+2],m=e[p+3],y=e[p+4],v=0===r?d:f,x=0===r?m:y,w=!1;s&&(a=Math.sqrt(Math.pow(d-m,2)+Math.pow(f-y,2))),v<o?x>o&&(l=c(u,d,f,m,y,o),s&&(u.start=h+a*l)):v>i?x<i&&(l=c(u,d,f,m,y,i),s&&(u.start=h+a*l)):re(u,d,f,g),x<o&&v>=o&&(l=c(u,d,f,m,y,o),w=!0),x>i&&v<=i&&(l=c(u,d,f,m,y,i),w=!0),!n&&w&&(s&&(u.end=h+a*l),t.push(u),u=oe(e)),s&&(h+=a)}var S=e.length-3;d=e[S],f=e[S+1],g=e[S+2],(v=0===r?d:f)>=o&&v<=i&&re(u,d,f,g),S=u.length-3,n&&S>=3&&(u[S]!==u[0]||u[S+1]!==u[1])&&re(u,u[0],u[1],u[2]),u.length&&t.push(u)}function oe(e){var t=[];return t.size=e.size,t.start=e.start,t.end=e.end,t}function ie(e,t,o,i,r,n){for(var s=0;s<e.length;s++)te(e[s],t,o,i,r,n,!1)}function re(e,t,o,i){e.push(t),e.push(o),e.push(i)}function ne(e,t,o,i,r,n){var s=(n-t)/(i-t);return e.push(n),e.push(o+(r-o)*s),e.push(1),s}function se(e,t,o,i,r,n){var s=(n-o)/(r-o);return e.push(t+(i-t)*s),e.push(n),e.push(1),s}function ae(e,t){for(var o=[],i=0;i<e.length;i++){var r,n=e[i],s=n.type;if("Point"===s||"MultiPoint"===s||"LineString"===s)r=le(n.geometry,t);else if("MultiLineString"===s||"Polygon"===s){r=[];for(var a=0;a<n.geometry.length;a++)r.push(le(n.geometry[a],t))}else if("MultiPolygon"===s)for(r=[],a=0;a<n.geometry.length;a++){for(var l=[],u=0;u<n.geometry[a].length;u++)l.push(le(n.geometry[a][u],t));r.push(l)}o.push(V(n.id,s,r,n.tags))}return o}function le(e,t){var o=[];o.size=e.size,void 0!==e.start&&(o.start=e.start,o.end=e.end);for(var i=0;i<e.length;i+=3)o.push(e[i]+t,e[i+1],e[i+2]);return o}function ue(e,t){if(e.transformed)return e;var o,i,r,n=1<<e.z,s=e.x,a=e.y;for(o=0;o<e.features.length;o++){var l=e.features[o],u=l.geometry,c=l.type;if(l.geometry=[],1===c)for(i=0;i<u.length;i+=2)l.geometry.push(ce(u[i],u[i+1],t,n,s,a));else for(i=0;i<u.length;i++){var h=[];for(r=0;r<u[i].length;r+=2)h.push(ce(u[i][r],u[i][r+1],t,n,s,a));l.geometry.push(h)}}return e.transformed=!0,e}function ce(e,t,o,i,r,n){return[Math.round(o*(e*i-r)),Math.round(o*(t*i-n))]}function he(e,t,o,i,r){for(var n=t===r.maxZoom?0:r.tolerance/((1<<t)*r.extent),s={features:[],numPoints:0,numSimplified:0,numFeatures:0,source:null,x:o,y:i,z:t,transformed:!1,minX:2,minY:1,maxX:-1,maxY:0},a=0;a<e.length;a++){s.numFeatures++,pe(s,e[a],n,r);var l=e[a].minX,u=e[a].minY,c=e[a].maxX,h=e[a].maxY;l<s.minX&&(s.minX=l),u<s.minY&&(s.minY=u),c>s.maxX&&(s.maxX=c),h>s.maxY&&(s.maxY=h)}return s}function pe(e,t,o,i){var r=t.geometry,n=t.type,s=[];if("Point"===n||"MultiPoint"===n)for(var a=0;a<r.length;a+=3)s.push(r[a]),s.push(r[a+1]),e.numPoints++,e.numSimplified++;else if("LineString"===n)de(s,r,e,o,!1,!1);else if("MultiLineString"===n||"Polygon"===n)for(a=0;a<r.length;a++)de(s,r[a],e,o,"Polygon"===n,0===a);else if("MultiPolygon"===n)for(var l=0;l<r.length;l++){var u=r[l];for(a=0;a<u.length;a++)de(s,u[a],e,o,!0,0===a)}if(s.length){var c=t.tags||null;if("LineString"===n&&i.lineMetrics){for(var h in c={},t.tags)c[h]=t.tags[h];c.mapbox_clip_start=r.start/r.size,c.mapbox_clip_end=r.end/r.size}var p={geometry:s,type:"Polygon"===n||"MultiPolygon"===n?3:"LineString"===n||"MultiLineString"===n?2:1,tags:c};null!==t.id&&(p.id=t.id),e.features.push(p)}}function de(e,t,o,i,r,n){var s=i*i;if(i>0&&t.size<(r?s:i))o.numPoints+=t.length/3;else{for(var a=[],l=0;l<t.length;l+=3)(0===i||t[l+2]>s)&&(o.numSimplified++,a.push(t[l]),a.push(t[l+1])),o.numPoints++;r&&function(e,t){for(var o=0,i=0,r=e.length,n=r-2;i<r;n=i,i+=2)o+=(e[i]-e[n])*(e[i+1]+e[n+1]);if(o>0===t)for(i=0,r=e.length;i<r/2;i+=2){var s=e[i],a=e[i+1];e[i]=e[r-2-i],e[i+1]=e[r-1-i],e[r-2-i]=s,e[r-1-i]=a}}(a,n),e.push(a)}}function fe(e,t){var o=(t=this.options=function(e,t){for(var o in t)e[o]=t[o];return e}(Object.create(this.options),t)).debug;if(o&&console.time("preprocess data"),t.maxZoom<0||t.maxZoom>24)throw new Error("maxZoom should be in the 0-24 range");if(t.promoteId&&t.generateId)throw new Error("promoteId and generateId cannot be used together.");var i=function(e,t){var o=[];if("FeatureCollection"===e.type)for(var i=0;i<e.features.length;i++)W(o,e.features[i],t,i);else W(o,"Feature"===e.type?e:{geometry:e},t);return o}(e,t);this.tiles={},this.tileCoords=[],o&&(console.timeEnd("preprocess data"),console.log("index: maxZoom: %d, maxPoints: %d",t.indexMaxZoom,t.indexMaxPoints),console.time("generate tiles"),this.stats={},this.total=0),i=function(e,t){var o=t.buffer/t.extent,i=e,r=Q(e,1,-1-o,o,0,-1,2,t),n=Q(e,1,1-o,2+o,0,-1,2,t);return(r||n)&&(i=Q(e,1,-o,1+o,0,-1,2,t)||[],r&&(i=ae(r,1).concat(i)),n&&(i=i.concat(ae(n,-1)))),i}(i,t),i.length&&this.splitTile(i,0,0,0),o&&(i.length&&console.log("features: %d, points: %d",this.tiles[0].numFeatures,this.tiles[0].numPoints),console.timeEnd("generate tiles"),console.log("tiles generated:",this.total,JSON.stringify(this.stats)))}function ge(e,t,o){return 32*((1<<e)*o+t)+e}function me(e,t){return t?e.properties[t]:e.id}function ye(e,t){if(null==e)return!0;if("Feature"===e.type)return null!=me(e,t);if("FeatureCollection"===e.type){const o=new Set;for(const i of e.features){const e=me(i,t);if(null==e)return!1;if(o.has(e))return!1;o.add(e)}return!0}return!1}function ve(e,t){const o=new Map;if(null==e);else if("Feature"===e.type)o.set(me(e,t),e);else for(const i of e.features)o.set(me(i,t),i);return o}function xe(t,o){const i=t.tileID.canonical;if(!this._geoJSONIndex)return o(null,null);const r=this._geoJSONIndex.getTile(i.z,i.x,i.y);if(!r)return o(null,null);const n=new class{constructor(t){this.layers={_geojsonTileLayer:this},this.name="_geojsonTileLayer",this.extent=e.EXTENT,this.length=t.length,this._features=t}feature(t){return new class{constructor(t){this._feature=t,this.extent=e.EXTENT,this.type=t.type,this.properties=t.tags,"id"in t&&!isNaN(t.id)&&(this.id=parseInt(t.id,10))}loadGeometry(){if(1===this._feature.type){const t=[];for(const o of this._feature.geometry)t.push([new e.Point(o[0],o[1])]);return t}{const t=[];for(const o of this._feature.geometry){const i=[];for(const t of o)i.push(new e.Point(t[0],t[1]));t.push(i)}return t}}toGeoJSON(e,t,o){return h.call(this,e,t,o)}}(this._features[t])}}(r.features);let s=C(n);0===s.byteOffset&&s.byteLength===s.buffer.byteLength||(s=new Uint8Array(s)),o(null,{vectorTile:n,rawData:s.buffer})}fe.prototype.options={maxZoom:14,indexMaxZoom:5,indexMaxPoints:1e5,tolerance:3,extent:4096,buffer:64,lineMetrics:!1,promoteId:null,generateId:!1,debug:0},fe.prototype.splitTile=function(e,t,o,i,r,n,s){for(var a=[e,t,o,i],l=this.options,u=l.debug;a.length;){i=a.pop(),o=a.pop(),t=a.pop(),e=a.pop();var c=1<<t,h=ge(t,o,i),p=this.tiles[h];if(!p&&(u>1&&console.time("creation"),p=this.tiles[h]=he(e,t,o,i,l),this.tileCoords.push({z:t,x:o,y:i}),u)){u>1&&(console.log("tile z%d-%d-%d (features: %d, points: %d, simplified: %d)",t,o,i,p.numFeatures,p.numPoints,p.numSimplified),console.timeEnd("creation"));var d="z"+t;this.stats[d]=(this.stats[d]||0)+1,this.total++}if(p.source=e,r){if(t===l.maxZoom||t===r)continue;var f=1<<r-t;if(o!==Math.floor(n/f)||i!==Math.floor(s/f))continue}else if(t===l.indexMaxZoom||p.numPoints<=l.indexMaxPoints)continue;if(p.source=null,0!==e.length){u>1&&console.time("clipping");var g,m,y,v,x,w,S=.5*l.buffer/l.extent,I=.5-S,b=.5+S,M=1+S;g=m=y=v=null,x=Q(e,c,o-S,o+b,0,p.minX,p.maxX,l),w=Q(e,c,o+I,o+M,0,p.minX,p.maxX,l),e=null,x&&(g=Q(x,c,i-S,i+b,1,p.minY,p.maxY,l),m=Q(x,c,i+I,i+M,1,p.minY,p.maxY,l),x=null),w&&(y=Q(w,c,i-S,i+b,1,p.minY,p.maxY,l),v=Q(w,c,i+I,i+M,1,p.minY,p.maxY,l),w=null),u>1&&console.timeEnd("clipping"),a.push(g||[],t+1,2*o,2*i),a.push(m||[],t+1,2*o,2*i+1),a.push(y||[],t+1,2*o+1,2*i),a.push(v||[],t+1,2*o+1,2*i+1)}}},fe.prototype.getTile=function(e,t,o){var i=this.options,r=i.extent,n=i.debug;if(e<0||e>24)return null;var s=1<<e,a=ge(e,t=(t%s+s)%s,o);if(this.tiles[a])return ue(this.tiles[a],r);n>1&&console.log("drilling down to z%d-%d-%d",e,t,o);for(var l,u=e,c=t,h=o;!l&&u>0;)u--,c=Math.floor(c/2),h=Math.floor(h/2),l=this.tiles[ge(u,c,h)];return l&&l.source?(n>1&&console.log("found parent tile z%d-%d-%d",u,c,h),n>1&&console.time("drilling down"),this.splitTile(l.source,u,c,h,e,t,o),n>1&&console.timeEnd("drilling down"),this.tiles[a]?ue(this.tiles[a],r):null):null};class we extends s{constructor(t,o,i,r){super(t,o,i,xe),this._dataUpdateable=new Map,this.loadGeoJSON=(t,o)=>{const{promoteId:i}=t;if(t.request)return e.getJSON(t.request,((e,t,r,n)=>{this._dataUpdateable=ye(t,i)?ve(t,i):void 0,o(e,t,r,n)}));if("string"==typeof t.data)try{const e=JSON.parse(t.data);this._dataUpdateable=ye(e,i)?ve(e,i):void 0,o(null,e)}catch(e){o(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`))}else t.dataDiff?this._dataUpdateable?(function(e,t,o){var i,r,n,s;if(t.removeAll&&e.clear(),t.remove)for(const o of t.remove)e.delete(o);if(t.add)for(const i of t.add){const t=me(i,o);null!=t&&e.set(t,i)}if(t.update)for(const o of t.update){let t=e.get(o.id);if(null==t)continue;const a=!o.removeAllProperties&&((null===(i=o.removeProperties)||void 0===i?void 0:i.length)>0||(null===(r=o.addOrUpdateProperties)||void 0===r?void 0:r.length)>0);if((o.newGeometry||o.removeAllProperties||a)&&(t={...t},e.set(o.id,t),a&&(t.properties={...t.properties})),o.newGeometry&&(t.geometry=o.newGeometry),o.removeAllProperties)t.properties={};else if((null===(n=o.removeProperties)||void 0===n?void 0:n.length)>0)for(const e of o.removeProperties)Object.prototype.hasOwnProperty.call(t.properties,e)&&delete t.properties[e];if((null===(s=o.addOrUpdateProperties)||void 0===s?void 0:s.length)>0)for(const{key:e,value:i}of o.addOrUpdateProperties)t.properties[e]=i}}(this._dataUpdateable,t.dataDiff,i),o(null,{type:"FeatureCollection",features:Array.from(this._dataUpdateable.values())})):o(new Error(`Cannot update existing geojson data in ${t.source}`)):o(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`));return{cancel:()=>{}}},r&&(this.loadGeoJSON=r)}loadData(t,o){var i;null===(i=this._pendingRequest)||void 0===i||i.cancel(),this._pendingCallback&&this._pendingCallback(null,{abandoned:!0});const r=!!(t&&t.request&&t.request.collectResourceTiming)&&new e.RequestPerformance(t.request);this._pendingCallback=o,this._pendingRequest=this.loadGeoJSON(t,((i,n)=>{if(delete this._pendingCallback,delete this._pendingRequest,i||!n)return o(i);if("object"!=typeof n)return o(new Error(`Input data given to '${t.source}' is not a valid GeoJSON object.`));{c(n,!0);try{if(t.filter){const o=e.createExpression(t.filter,{type:"boolean","property-type":"data-driven",overridable:!1,transition:!1});if("error"===o.result)throw new Error(o.value.map((e=>`${e.key}: ${e.message}`)).join(", "));const i=n.features.filter((e=>o.value.evaluate({zoom:0},e)));n={type:"FeatureCollection",features:i}}this._geoJSONIndex=t.cluster?new L(function({superclusterOptions:t,clusterProperties:o}){if(!o||!t)return t;const i={},r={},n={accumulated:null,zoom:0},s={properties:null},a=Object.keys(o);for(const t of a){const[n,s]=o[t],a=e.createExpression(s),l=e.createExpression("string"==typeof n?[n,["accumulated"],["get",t]]:n);i[t]=a.value,r[t]=l.value}return t.map=e=>{s.properties=e;const t={};for(const e of a)t[e]=i[e].evaluate(n,s);return t},t.reduce=(e,t)=>{s.properties=t;for(const t of a)n.accumulated=e[t],e[t]=r[t].evaluate(n,s)},t}(t)).load(n.features):function(e,t){return new fe(e,t)}(n,t.geojsonVtOptions)}catch(i){return o(i)}this.loaded={};const s={};if(r){const e=r.finish();e&&(s.resourceTiming={},s.resourceTiming[t.source]=JSON.parse(JSON.stringify(e)))}o(null,s)}}))}reloadTile(e,t){const o=this.loaded;return o&&o[e.uid]?super.reloadTile(e,t):this.loadTile(e,t)}removeSource(e,t){this._pendingCallback&&this._pendingCallback(null,{abandoned:!0}),t()}getClusterExpansionZoom(e,t){try{t(null,this._geoJSONIndex.getClusterExpansionZoom(e.clusterId))}catch(e){t(e)}}getClusterChildren(e,t){try{t(null,this._geoJSONIndex.getChildren(e.clusterId))}catch(e){t(e)}}getClusterLeaves(e,t){try{t(null,this._geoJSONIndex.getLeaves(e.clusterId,e.limit,e.offset))}catch(e){t(e)}}}class Se{constructor(t){this.self=t,this.actor=new e.Actor(t,this),this.layerIndexes={},this.availableImages={},this.workerSourceTypes={vector:s,geojson:we},this.workerSources={},this.demWorkerSources={},this.self.registerWorkerSource=(e,t)=>{if(this.workerSourceTypes[e])throw new Error(`Worker source with name "${e}" already registered.`);this.workerSourceTypes[e]=t},this.self.registerRTLTextPlugin=t=>{if(e.plugin.isParsed())throw new Error("RTL text plugin already registered.");e.plugin.applyArabicShaping=t.applyArabicShaping,e.plugin.processBidirectionalText=t.processBidirectionalText,e.plugin.processStyledBidirectionalText=t.processStyledBidirectionalText}}setReferrer(e,t){this.referrer=t}setImages(e,t,o){this.availableImages[e]=t;for(const o in this.workerSources[e]){const i=this.workerSources[e][o];for(const e in i)i[e].availableImages=t}o()}setLayers(e,t,o){this.getLayerIndex(e).replace(t),o()}updateLayers(e,t,o){this.getLayerIndex(e).update(t.layers,t.removedIds),o()}loadTile(e,t,o){this.getWorkerSource(e,t.type,t.source).loadTile(t,o)}loadDEMTile(e,t,o){this.getDEMWorkerSource(e,t.source).loadTile(t,o)}reloadTile(e,t,o){this.getWorkerSource(e,t.type,t.source).reloadTile(t,o)}abortTile(e,t,o){this.getWorkerSource(e,t.type,t.source).abortTile(t,o)}removeTile(e,t,o){this.getWorkerSource(e,t.type,t.source).removeTile(t,o)}removeDEMTile(e,t){this.getDEMWorkerSource(e,t.source).removeTile(t)}removeSource(e,t,o){if(!this.workerSources[e]||!this.workerSources[e][t.type]||!this.workerSources[e][t.type][t.source])return;const i=this.workerSources[e][t.type][t.source];delete this.workerSources[e][t.type][t.source],void 0!==i.removeSource?i.removeSource(t,o):o()}loadWorkerSource(e,t,o){try{this.self.importScripts(t.url),o()}catch(e){o(e.toString())}}syncRTLPluginState(t,o,i){try{e.plugin.setState(o);const t=e.plugin.getPluginURL();if(e.plugin.isLoaded()&&!e.plugin.isParsed()&&null!=t){this.self.importScripts(t);const o=e.plugin.isParsed();i(o?void 0:new Error(`RTL Text Plugin failed to import scripts from ${t}`),o)}}catch(e){i(e.toString())}}getAvailableImages(e){let t=this.availableImages[e];return t||(t=[]),t}getLayerIndex(e){let o=this.layerIndexes[e];return o||(o=this.layerIndexes[e]=new t),o}getWorkerSource(e,t,o){if(this.workerSources[e]||(this.workerSources[e]={}),this.workerSources[e][t]||(this.workerSources[e][t]={}),!this.workerSources[e][t][o]){const i={send:(t,o,i)=>{this.actor.send(t,o,i,e)}};this.workerSources[e][t][o]=new this.workerSourceTypes[t](i,this.getLayerIndex(e),this.getAvailableImages(e))}return this.workerSources[e][t][o]}getDEMWorkerSource(e,t){return this.demWorkerSources[e]||(this.demWorkerSources[e]={}),this.demWorkerSources[e][t]||(this.demWorkerSources[e][t]=new a),this.demWorkerSources[e][t]}}return e.isWorker()&&(self.worker=new Se(self)),Se}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
